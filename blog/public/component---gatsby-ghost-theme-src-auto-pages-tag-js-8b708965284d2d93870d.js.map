{"version":3,"sources":["webpack:///../gatsby-ghost-theme/src/auto-pages/tag.js","webpack:///../gatsby-ghost-theme/src/components/PageWithList/styles.js","webpack:///../gatsby-ghost-theme/src/components/PageWithList/index.js"],"names":["data","pageContext","React","ampContext","allTags","node","id","slug","title","image","excerpt","description","main","cardList","isAmp","cards","getPostCards","authors","query","Content","styled","PageWithList","singlePage","frontmatter","contentType","background","allEven"],"mappings":"6NAQe,sBAA4B,IAAzBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAItB,GAHmBC,eAAnB,KACAC,SAAoBF,EAApBE,QAEKF,EAAL,SAA2B,CACzB,IAAMG,EAAUJ,EAAA,gBAAoB,gBAAGK,EAAH,aAAe,CACjDC,GAAID,EAD6C,GAEjDE,KAAK,OAAQF,EAFoC,KAGjDG,MAAOH,EAH0C,KAIjDI,MACEJ,GAAQA,EAARA,eAA8BA,gCALiB,MAMjDK,QAASL,EAAKM,gBAGhB,OACE,uBACEC,KAAM,CAAEJ,MAAF,WAAqBG,YAAa,oBACxCE,SAFF,EAGEC,MAAOb,EAAYa,QAKzB,IAAMC,EAAQC,YAAahB,QAAD,MAAmBA,UAA7C,OAEA,OACE,uBACEa,SADF,EAEED,KAAM,CACJH,MACET,qBACAA,oCAHE,MAIJQ,MAAOR,MAJH,KAKJW,YAAaX,MAASW,aAExBM,QAASjB,UATX,MAUEc,MAAOb,EAAYa,SAKlB,IAAMI,EAAN,c,uHCtCMC,EAAUC,IAAH,sEAAGA,CAAH,sGAAb,K,YCJQ,SAASC,EAAa,GAAoC,IAAlCT,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAA2B,IAAjBC,aAAiB,SACtE,OACE,uBAAYQ,YAAU,GACpB,uBACEtB,KAAM,CAAEuB,YAAa,CAAEf,MAAOI,EAAT,MAAqBF,QAASE,EAAKD,cACxDa,YAAY,YAGd,uBACEC,WAAYb,EADd,MAEEJ,MAAOI,EAFT,MAGED,YAAaC,EAHf,YAIEE,MAAOA,IAET,yBACE,uBAAUC,MAAV,EAA2BW,SAAO,MAtB1C","file":"component---gatsby-ghost-theme-src-auto-pages-tag-js-8b708965284d2d93870d.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\n// eslint-disable-next-line no-unused-vars\nimport { GatsbyImageSharpFixed, GatsbyImageSharpFluid } from \"gatsby-image\";\nimport PageWithList from \"../components/PageWithList\";\nimport { getPostCards } from \"../utils/mappers\";\nimport { AmpContext } from \"../utils/ampContext\";\n\nexport default ({ data, pageContext }) => {\n  const ampContext = React.useContext(AmpContext);\n  ampContext.setIsAmp(pageContext.isAmp);\n\n  if (!pageContext.tag_slug) {\n    const allTags = data.tags.edges.map(({ node }) => ({\n      id: node.id,\n      slug: `tag/${node.slug}`,\n      title: node.name,\n      image:\n        node && node.feature_image && node.feature_image.childImageSharp.fluid,\n      excerpt: node.description,\n    }));\n\n    return (\n      <PageWithList\n        main={{ title: \"All tags\", description: \"List of all tags\" }}\n        cardList={allTags}\n        isAmp={pageContext.isAmp}\n      />\n    );\n  }\n\n  const cards = getPostCards(data.posts.edges, data.authors.edges);\n\n  return (\n    <PageWithList\n      cardList={cards}\n      main={{\n        image:\n          data.tag.feature_image &&\n          data.tag.feature_image.childImageSharp.fluid,\n        title: data.tag.name,\n        description: data.tag.description,\n      }}\n      authors={data.authors.edges}\n      isAmp={pageContext.isAmp}\n    />\n  );\n};\n\nexport const query = graphql`\n  query($tag_slug: String) {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date_created], order: DESC }\n      filter: {\n        frontmatter: { draft: { ne: true }, tags: { in: [$tag_slug] } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt\n          frontmatter {\n            title\n            slug\n            tags\n            date_created\n            date_updated\n            author\n            feature_image {\n              absolutePath\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    tag: tagsYaml(slug: { eq: $tag_slug }) {\n      id\n      name\n      description\n      feature_image {\n        absolutePath\n        childImageSharp {\n          fluid(maxWidth: 1920) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      meta_description\n      meta_title\n      created_at\n      updated_at\n      visibility\n    }\n    tags: allTagsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          description\n          meta_title\n          meta_description\n          created_at\n          feature_image {\n            absolutePath\n            childImageSharp {\n              fluid(maxWidth: 600) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    authors: allAuthorsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          bio\n          website\n          location\n          profile_image {\n            childImageSharp {\n              fixed(width: 30, height: 30) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport { CONTENT_MAX_WIDTH, CONTENT_OVERLAP_HEIGHT } from \"../variables\";\n\n// export const Content = styled.div`\n//   display: block;\n//   margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n//   max-width: ${CONTENT_MAX_WIDTH}px;\n//   flex: 1 0 auto;\n//   min-width: 33.333%;\n// `;\n\nexport const Content = styled.div`\n  position: relative;\n  z-index: 1;\n  display: block;\n  margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n  flex: 1 0 auto;\n`;\n","import React from \"react\";\nimport CardList from \"../CardList\";\nimport Header from \"../Header\";\nimport PageLayout from \"../PageLayout\";\nimport { Content } from \"./styles\";\nimport Seo from \"../Seo\";\n\nexport default function PageWithList({ main, cardList, isAmp = false }) {\n  return (\n    <PageLayout singlePage>\n      <Seo\n        data={{ frontmatter: { title: main.title, excerpt: main.description } }}\n        contentType=\"website\"\n      />\n\n      <Header\n        background={main.image}\n        title={main.title}\n        description={main.description}\n        isAmp={isAmp}\n      />\n      <Content>\n        <CardList cards={cardList} allEven />\n      </Content>\n    </PageLayout>\n  );\n}\n"],"sourceRoot":""}