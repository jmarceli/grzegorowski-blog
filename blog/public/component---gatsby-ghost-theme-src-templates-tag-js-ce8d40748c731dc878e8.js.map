{"version":3,"sources":["webpack:///../gatsby-ghost-theme/src/templates/tag.js","webpack:///../gatsby-ghost-theme/src/components/Seo/index.js","webpack:///../gatsby-ghost-theme/src/utils/seo.js","webpack:///../gatsby-ghost-theme/src/components/Header/styles.js","webpack:///../gatsby-ghost-theme/src/components/Header/index.js","webpack:///../gatsby-ghost-theme/src/components/CardList/styles.js","webpack:///../gatsby-ghost-theme/src/components/CardList/index.js","webpack:///../gatsby-ghost-theme/src/utils/mappers.js","webpack:///../gatsby-ghost-theme/src/components/PageWithList/styles.js","webpack:///../gatsby-ghost-theme/src/components/PageWithList/index.js"],"names":["__webpack_exports__","_ref","data","pageContext","React","_utils_ampContext__WEBPACK_IMPORTED_MODULE_5__","ampContext","tag_slug","allTags","tags","edges","map","_ref2","node","id","slug","title","name","image","fluid","excerpt","description","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_PageWithList__WEBPACK_IMPORTED_MODULE_3__","main","cardList","cards","getPostCards","authors","query","Seo","author","contentType","seoData","headline","datePublished","date_created","dateModified","date_updated","keywords","imageUrl","relativePath","copyrightYear","schema","authorName","type","innerHTML","JSON","stringify","@context","@type","url","publisher","logo","copyrightHolder","creator","inLanguage","schemaWebsite","Object","assign","nationality","alumniOf","sameAs","gender","jobTitle","worksFor","address","addressLocality","addressCountry","schemaPerson","mainEntityOfPage","@id","schemaArticle","articleBody","schemaBlogPosting","react_default","Helmet_default","script","content","Wrapper","styled","header","withConfig","displayName","componentId","withTopBar","variables","_ref3","large","_ref4","white","_ref5","Background","gatsby_image_default","NoBackground","div","_ref6","Container","toEm","Avatar","Title","h1","typography","_ref7","Description","h2","Header","background","profileImage","postsNumber","links","children","_ref$withTopBar","_ref$banner","banner","objectFit","objectPosition","alt","fixed","__webpack_require__","d","aside","List","ul","smallSizes","small","medium","mediumSizes","Item","li","size","featured","itemSize","index","even","allEven","card","key","CardPost","timeToRead","tag","date","posts","find","postToCard","postNode","authorNode","Content","PageWithList","PageLayout","singlePage","frontmatter","CardList"],"mappings":"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","file":"component---gatsby-ghost-theme-src-templates-tag-js-ce8d40748c731dc878e8.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\n// eslint-disable-next-line no-unused-vars\nimport { GatsbyImageSharpFixed, GatsbyImageSharpFluid } from \"gatsby-image\";\nimport PageWithList from \"../components/PageWithList\";\nimport { getPostCards } from \"../utils/mappers\";\nimport { AmpContext } from \"../utils/ampContext\";\n\nexport default ({ data, pageContext }) => {\n  const ampContext = React.useContext(AmpContext);\n  ampContext.setIsAmp(pageContext.isAmp);\n\n  if (!pageContext.tag_slug) {\n    const allTags = data.tags.edges.map(({ node }) => ({\n      id: node.id,\n      slug: `tag/${node.slug}`,\n      title: node.name,\n      image:\n        node && node.feature_image && node.feature_image.childImageSharp.fluid,\n      excerpt: node.description,\n    }));\n\n    return (\n      <PageWithList\n        main={{ title: \"All tags\", description: \"List of all tags\" }}\n        cardList={allTags}\n      />\n    );\n  }\n\n  const cards = getPostCards(data.posts.edges, data.authors.edges);\n\n  return (\n    <PageWithList\n      cardList={cards}\n      main={{\n        image:\n          data.tag.feature_image &&\n          data.tag.feature_image.childImageSharp.fluid,\n        title: data.tag.name,\n        description: data.tag.description,\n      }}\n      authors={data.authors.edges}\n    />\n  );\n};\n\nexport const query = graphql`\n  query($tag_slug: String) {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date_created], order: DESC }\n      filter: {\n        frontmatter: { draft: { ne: true }, tags: { in: [$tag_slug] } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt\n          frontmatter {\n            title\n            slug\n            tags\n            date_created\n            date_updated\n            author\n            feature_image {\n              absolutePath\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    tag: tagsYaml(slug: { eq: $tag_slug }) {\n      id\n      name\n      description\n      feature_image {\n        absolutePath\n        childImageSharp {\n          fluid(maxWidth: 1920) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      meta_description\n      meta_title\n      created_at\n      updated_at\n      visibility\n    }\n    tags: allTagsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          description\n          meta_title\n          meta_description\n          created_at\n          feature_image {\n            absolutePath\n            childImageSharp {\n              fluid(maxWidth: 600) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    authors: allAuthorsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          bio\n          website\n          location\n          profile_image {\n            childImageSharp {\n              fixed(width: 30, height: 30) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport {\n  schemaBlogPosting,\n  schemaWebsite,\n  schemaPerson,\n  schemaArticle,\n} from \"../../utils/seo\";\n\nexport default function Seo({ data, author, contentType }) {\n  const seoData = {\n    headline: data.frontmatter.meta_title || data.frontmatter.title,\n    description:\n      data.frontmatter.meta_description ||\n      data.frontmatter.excerpt ||\n      data.excerpt,\n    datePublished: data.frontmatter.date_created,\n    dateModified: data.frontmatter.date_updated,\n    keywords: data.frontmatter.tags && data.frontmatter.tags.join(\", \"),\n    imageUrl:\n      data.frontmatter.feature_image &&\n      \"https://grzegorowski.com/\" + data.frontmatter.feature_image.relativePath,\n    copyrightYear: data.frontmatter.date_created,\n    author: author && author.node && author.node.name,\n  };\n\n  const schema =\n    contentType === \"website\"\n      ? schemaWebsite(\n          { ...seoData, url: \"https://www.grzegorowski.com\" },\n          seoData.author,\n        )\n      : contentType === \"author\"\n      ? schemaPerson({\n          name: seoData.headline,\n          imageUrl: seoData.imageUrl,\n          url: \"https://www.grzegorowski.com/\" + data.slug,\n        })\n      : contentType === \"article\"\n      ? schemaArticle(seoData, seoData.author)\n      : schemaBlogPosting(seoData, seoData.author);\n\n  return (\n    <Helmet script={schema}>\n      <title>{seoData.headline}</title>\n      <meta name=\"description\" content={seoData.description} />\n      {seoData.author && <meta name=\"author\" content={seoData.author} />}\n    </Helmet>\n  );\n}\n","export function schemaBlogPosting(data, authorName) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\", // \"Article\",\n        publisher: {\n          \"@type\": \"Organization\",\n          logo: {\n            type: \"ImageObject\",\n            url: \"https://grzegorowski.com/favicon.ico\",\n          },\n          name: authorName,\n        },\n        author: {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        headline: data.headline,\n        description: data.description,\n        datePublished: data.datePublished,\n        dateModified: data.dateModified,\n        keywords: data.keywords,\n        image: data.imageUrl && [\n          {\n            \"@type\": \"ImageObject\",\n            url: data.imageUrl,\n          },\n        ],\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": \"https://grzegorowski.com/\",\n        },\n        articleBody: data.articleBody,\n        copyrightHolder: {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        copyrightYear: data.copyrightYear,\n        creator: {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        inLanguage: \"en\",\n      }),\n    },\n  ];\n}\n\nexport function schemaArticle(data, authorName) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"Article\", // \"Article\",\n        publisher: authorName && {\n          \"@type\": \"Organization\",\n          logo: {\n            type: \"ImageObject\",\n            url: \"https://grzegorowski.com/favicon.ico\",\n          },\n          name: authorName,\n        },\n        author: authorName && {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        headline: data.headline,\n        description: data.description,\n        datePublished: data.datePublished,\n        dateModified: data.dateModified,\n        keywords: data.keywords,\n        image: data.imageUrl && [\n          {\n            \"@type\": \"ImageObject\",\n            url: data.imageUrl,\n          },\n        ],\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": \"https://grzegorowski.com/\",\n        },\n        copyrightHolder: authorName,\n        copyrightYear: data.copyrightYear,\n        creator: authorName,\n        inLanguage: \"en\",\n      }),\n    },\n  ];\n}\n\nexport function schemaPerson(data) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"Person\",\n        name: data.name,\n        url: data.url,\n        image: data.imageUrl && {\n          \"@type\": \"ImageObject\",\n          url: data.imageUrl,\n        },\n        nationality: \"Polish\",\n        alumniOf: [\n          {\n            \"@type\": \"CollegeOrUniversity\",\n            name: \"Warsaw University of Technology\",\n            sameAs: [\n              \"https://en.wikipedia.org/wiki/Warsaw_University_of_Technology\",\n              \"https://www.pw.edu.pl/engpw\",\n            ],\n          },\n        ],\n        gender: \"Male\",\n        description: \"Full-stack developer\",\n        jobTitle: \"Senior Software Engineer\",\n        worksFor: [\n          {\n            \"@type\": \"Organization\",\n            name: \"Equinix Inc.\",\n            sameAs: [\n              \"https://www.equinix.com/\",\n              \"https://www.linkedin.com/company/equinix/\",\n              \"https://twitter.com/equinix\",\n            ],\n          },\n        ],\n        address: {\n          \"@type\": \"PostalAddress\",\n          addressLocality: \"Warsaw\",\n          addressCountry: \"Poland\",\n        },\n      }),\n    },\n  ];\n}\n\nexport function schemaWebsite(data, authorName) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: data.url,\n        headline: data.headline,\n        description: data.description,\n        publisher: authorName && {\n          \"@type\": \"Organization\",\n          logo: {\n            type: \"ImageObject\",\n            url: \"https://grzegorowski.com/favicon.ico\",\n          },\n          name: authorName,\n        },\n        author: authorName && {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        datePublished: data.datePublished,\n        dateModified: data.dateModified,\n        image: data.imageUrl && [\n          {\n            \"@type\": \"ImageObject\",\n            url: data.imageUrl,\n          },\n        ],\n        copyrightHolder: authorName,\n        copyrightYear: data.copyrightYear,\n        creator: authorName,\n        inLanguage: \"en\",\n      }),\n    },\n  ];\n}\n","import styled from \"styled-components\";\nimport Img from \"gatsby-image\";\nimport { ffSans, toEm } from \"src/utils/typography\";\nimport { CONTENT_OVERLAP_HEIGHT } from \"../variables\";\n\nexport const Wrapper = styled.header`\n  position: relative;\n  padding-top: ${({ withTopBar }) => (withTopBar ? 0 : 50)}px;\n  padding-bottom: ${({ withTopBar }) =>\n    withTopBar ? 0 : CONTENT_OVERLAP_HEIGHT}px;\n  min-height: ${({ withTopBar, large }) =>\n    withTopBar ? 450 : large ? 600 : 400}px;\n  height: 30vh;\n  color: ${({ white }) => (white ? \"#aaa\" : \"#fff\")};\n  background: ${({ white }) => (white ? \"#fff\" : \"rgba(0, 0, 0, 0.6)\")};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const Background = styled(Img)`\n  position: absolute !important;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n`;\n\nexport const NoBackground = styled.div`\n  position: absolute !important;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  background: ${({ white }) => (white ? \"#fff\" : \"#000\")};\n`;\n\nexport const Container = styled.div`\n  padding: 12px 24px;\n  max-width: 900px;\n  font-size: ${toEm(15)}rem;\n`;\n\nexport const Avatar = styled(Img)`\n  position: relative;\n  border-radius: 50%;\n  overflow: hidden;\n  box-shadow: 0 0 0 6px hsla(0, 0%, 100%, 0.1);\n`;\n\nexport const Title = styled.h1`\n  font-family: ${ffSans};\n  font-size: ${({ large }) => toEm(large ? 128 : 24)}rem;\n  font-weight: 600;\n  margin: 12px 0;\n`;\n\nexport const Description = styled.h2`\n  font-family: ${ffSans};\n  font-size: ${toEm(16)}rem;\n  font-weight: 400;\n  margin: 0;\n`;\n","import React from \"react\";\nimport {\n  Wrapper,\n  Avatar,\n  Background,\n  NoBackground,\n  Container,\n  Title,\n  Description,\n} from \"./styles\";\n\nexport default function Header({\n  background,\n  profileImage,\n  title,\n  postsNumber,\n  links,\n  description,\n  children,\n  withTopBar = false,\n  banner = false,\n}) {\n  return (\n    <Wrapper withTopBar={withTopBar} white={banner} large={banner}>\n      {background ? (\n        <Background\n          fluid={background}\n          objectFit=\"cover\"\n          objectPosition=\"50% 50%\"\n          alt=\"Title\"\n        />\n      ) : (\n        <NoBackground white={banner} />\n      )}\n      <Container>\n        {profileImage && <Avatar fixed={profileImage} alt={title} />}\n        {title && <Title large={banner}>{title}</Title>}\n        {description && <Description>{description}</Description>}\n        {children}\n      </Container>\n    </Wrapper>\n  );\n}\n","import styled from \"styled-components\";\nimport { BP_SMALL, BP_MEDIUM, CONTENT_MAX_WIDTH } from \"../variables\";\n\nexport const Wrapper = styled.aside`\n  background: #f4f8fb;\n`;\n\nexport const Container = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n`;\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 12px 0;\n  @media (min-width: ${BP_SMALL}px) {\n    padding: 12px;\n  }\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst smallSizes = {\n  small: \"50%\",\n  medium: \"50%\",\n  large: \"100%\",\n};\nconst mediumSizes = {\n  small: \"33.333%\",\n  medium: \"50%\",\n  large: \"100%\",\n};\n\n// fix left-right margin collapsing\nexport const Item = styled.li`\n  display: flex;\n  flex: 1 0 100%;\n  @media (min-width: ${BP_SMALL}px) {\n    flex: 1 0 ${({ size }) => smallSizes[size]};\n  }\n  @media (min-width: ${BP_MEDIUM}px) {\n    flex: 1 0 ${({ size }) => mediumSizes[size]};\n  }\n\n  width: 100%;\n  @media (min-width: ${BP_SMALL}px) {\n    width: ${({ size }) => smallSizes[size]};\n  }\n  @media (min-width: ${BP_MEDIUM}px) {\n    width: ${({ size }) => mediumSizes[size]};\n  }\n\n  margin: 0;\n  @media (min-width: ${BP_SMALL}px) {\n    min-height: ${({ size }) => (size === \"large\" ? \"400\" : \"460\")}px;\n  }\n\n  padding: 12px 8px;\n  @media (min-width: ${BP_SMALL}px) {\n    padding: 12px;\n  }\n  ${({ featured }) => (featured ? \"padding: 6px;\" : \"\")}\n`;\n","import React from \"react\";\nimport CardPost from \"../CardPost\";\nimport { Container, List, Item } from \"./styles\";\n\n// TODO: support CardPost layout for PageTag\nconst itemSize = (index, even = false) => {\n  if (!even) {\n    if (index % 6 === 0) {\n      return \"large\";\n    }\n    if (index % 6 === 4 || index % 6 === 5) {\n      return \"medium\";\n    }\n  }\n  return \"small\";\n};\n\nexport default ({ cards, allEven }) => (\n  <Container>\n    <List>\n      {cards.map((card, index) => (\n        <Item\n          key={card.id}\n          size={itemSize(index, allEven)}\n          featured={!allEven && index === 0}\n        >\n          <CardPost\n            title={card.title}\n            slug={card.slug}\n            timeToRead={card.timeToRead}\n            size={itemSize(index, allEven)}\n            excerpt={card.excerpt}\n            image={card.image}\n            tag={card.tag}\n            author={card.author}\n            date={card.date}\n          />\n        </Item>\n      ))}\n    </List>\n  </Container>\n);\n","export const getPostCards = (posts, authors) => {\n  const postsWithAuthors = posts.map(({ node }) => {\n    const author = authors.find(\n      ({ node: author }) => author.slug === node.frontmatter.author,\n    );\n    return postToCard(node, author);\n  });\n  return postsWithAuthors;\n};\n\nconst postToCard = (postNode, authorNode) => ({\n  id: postNode.id,\n  slug: postNode.frontmatter.slug,\n  tag:\n    postNode.frontmatter &&\n    postNode.frontmatter.tags &&\n    postNode.frontmatter.tags[0],\n  title: postNode.frontmatter.title,\n  image:\n    postNode.frontmatter &&\n    postNode.frontmatter.feature_image &&\n    postNode.frontmatter.feature_image.childImageSharp.fluid,\n  excerpt: postNode.frontmatter.excerpt || postNode.excerpt,\n  timeToRead: postNode.timeToRead,\n  date:\n    postNode.frontmatter.date_updated ||\n    postNode.frontmatter.date_created ||\n    postNode.date_created,\n  author: authorNode &&\n    authorNode.node && {\n      name: authorNode.node.name,\n      image:\n        authorNode.node.profile_image &&\n        authorNode.node.profile_image.childImageSharp &&\n        authorNode.node.profile_image.childImageSharp.fixed,\n    },\n});\n","import styled from \"styled-components\";\nimport { CONTENT_MAX_WIDTH, CONTENT_OVERLAP_HEIGHT } from \"../variables\";\n\n// export const Content = styled.div`\n//   display: block;\n//   margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n//   max-width: ${CONTENT_MAX_WIDTH}px;\n//   flex: 1 0 auto;\n//   min-width: 33.333%;\n// `;\n\nexport const Content = styled.div`\n  position: relative;\n  z-index: 1;\n  display: block;\n  margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n  flex: 1 0 auto;\n`;\n","import React from \"react\";\nimport CardList from \"../CardList\";\nimport Header from \"../Header\";\nimport PageLayout from \"../PageLayout\";\nimport { Content } from \"./styles\";\nimport Seo from \"../Seo\";\n\nexport default function PageWithList({ main, cardList }) {\n  return (\n    <PageLayout singlePage>\n      <Seo\n        data={{ frontmatter: { title: main.title, excerpt: main.description } }}\n        contentType=\"website\"\n      />\n\n      <Header\n        background={main.image}\n        title={main.title}\n        description={main.description}\n      />\n      <Content>\n        <CardList cards={cardList} allEven />\n      </Content>\n    </PageLayout>\n  );\n}\n"],"sourceRoot":""}