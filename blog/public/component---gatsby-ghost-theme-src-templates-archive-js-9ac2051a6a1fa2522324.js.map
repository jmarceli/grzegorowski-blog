{"version":3,"sources":["webpack:///../gatsby-ghost-theme/src/templates/archive.js","webpack:///../gatsby-ghost-theme/src/components/Seo/index.js","webpack:///../gatsby-ghost-theme/src/utils/seo.js","webpack:///../gatsby-ghost-theme/src/components/CardList/styles.js","webpack:///../gatsby-ghost-theme/src/components/CardList/index.js","webpack:///../gatsby-ghost-theme/src/components/Header/styles.js","webpack:///../gatsby-ghost-theme/src/components/Header/index.js","webpack:///../gatsby-ghost-theme/src/utils/mappers.js","webpack:///../gatsby-ghost-theme/src/components/PageWithList/styles.js","webpack:///../gatsby-ghost-theme/src/components/PageWithList/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_PageWithList__WEBPACK_IMPORTED_MODULE_1__","_utils_ampContext__WEBPACK_IMPORTED_MODULE_3__","_utils_mappers__WEBPACK_IMPORTED_MODULE_4__","_ref","data","pageContext","React","ampContext","cards","getPostCards","edges","a","createElement","main","title","description","cardList","Seo","author","contentType","seoData","headline","excerpt","datePublished","date_created","dateModified","date_updated","keywords","imageUrl","relativePath","copyrightYear","name","schema","authorName","type","innerHTML","JSON","stringify","@context","@type","url","publisher","logo","image","copyrightHolder","creator","inLanguage","schemaWebsite","Object","assign","nationality","alumniOf","sameAs","gender","jobTitle","worksFor","address","addressLocality","addressCountry","schemaPerson","slug","mainEntityOfPage","@id","schemaArticle","articleBody","schemaBlogPosting","react_default","Helmet_default","script","content","Container","styled","aside","withConfig","displayName","componentId","div","variables","List","ul","smallSizes","small","medium","large","mediumSizes","Item","li","size","_ref2","_ref3","_ref4","_ref5","_ref6","featured","itemSize","index","even","allEven","map","card","key","id","CardPost","timeToRead","tag","dateCreated","Wrapper","header","withTopBar","white","Background","gatsby_image_default","NoBackground","toEm","Avatar","Title","h1","typography","_ref7","Description","h2","Header","background","profileImage","postsNumber","links","children","_ref$withTopBar","_ref$banner","banner","fluid","objectFit","objectPosition","alt","fixed","posts","authors","node","find","postToCard","postNode","authorNode","Content","PageWithList","PageLayout","singlePage","frontmatter","CardList"],"mappings":"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","file":"component---gatsby-ghost-theme-src-templates-archive-js-9ac2051a6a1fa2522324.js","sourcesContent":["import React from \"react\";\nimport PageWithList from \"../components/PageWithList\";\n// eslint-disable-next-line no-unused-vars\nimport { GatsbyImageSharpFixed, GatsbyImageSharpFluid } from \"gatsby-image\";\nimport { graphql } from \"gatsby\";\nimport { AmpContext } from \"../utils/ampContext\";\nimport { getPostCards } from \"../utils/mappers\";\n\nexport default ({ data, pageContext }) => {\n  const ampContext = React.useContext(AmpContext);\n  ampContext.setIsAmp(pageContext.isAmp);\n\n  const cards = getPostCards(data.posts.edges, data.authors.edges);\n  return (\n    <PageWithList\n      main={{ title: \"Archive\", description: \"List of all posts\" }}\n      cardList={cards}\n    />\n  );\n};\n\nexport const query = graphql`\n  query($slug: String) {\n    page: markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      timeToRead\n      frontmatter {\n        author\n        feature_image {\n          absolutePath\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 1920) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        title\n        excerpt\n        slug\n        tags\n        date_created\n        date_updated\n        featured\n      }\n    }\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date_created], order: DESC }\n      filter: {\n        frontmatter: { draft: { ne: true }, layout: { nin: [\"page\", \"home\"] } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt\n          frontmatter {\n            title\n            slug\n            tags\n            date_created\n            date_updated\n            author\n            feature_image {\n              absolutePath\n              relativePath\n              childImageSharp {\n                fluid(maxWidth: 600, maxHeight: 300) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    authors: allAuthorsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          bio\n          website\n          location\n          profile_image {\n            relativePath\n            childImageSharp {\n              fixed(width: 30, height: 30) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport {\n  schemaBlogPosting,\n  schemaWebsite,\n  schemaPerson,\n  schemaArticle,\n} from \"../../utils/seo\";\n\nexport default function Seo({ data, author, contentType }) {\n  const seoData = {\n    headline: data.frontmatter.meta_title || data.frontmatter.title,\n    description:\n      data.frontmatter.meta_description ||\n      data.frontmatter.excerpt ||\n      data.excerpt,\n    datePublished: data.frontmatter.date_created,\n    dateModified: data.frontmatter.date_updated,\n    keywords: data.frontmatter.tags && data.frontmatter.tags.join(\", \"),\n    imageUrl:\n      data.frontmatter.feature_image &&\n      \"https://grzegorowski.com/\" + data.frontmatter.feature_image.relativePath,\n    copyrightYear: data.frontmatter.date_created,\n    author: author && author.node && author.node.name,\n  };\n\n  const schema =\n    contentType === \"website\"\n      ? schemaWebsite(\n          { ...seoData, url: \"https://www.grzegorowski.com\" },\n          seoData.author,\n        )\n      : contentType === \"author\"\n      ? schemaPerson({\n          name: seoData.headline,\n          imageUrl: seoData.imageUrl,\n          url: \"https://www.grzegorowski.com/\" + data.slug,\n        })\n      : contentType === \"article\"\n      ? schemaArticle(seoData, seoData.author)\n      : schemaBlogPosting(seoData, seoData.author);\n\n  return (\n    <Helmet script={schema}>\n      <title>{seoData.headline}</title>\n      <meta name=\"description\" content={seoData.description} />\n      {seoData.author && <meta name=\"author\" content={seoData.author} />}\n    </Helmet>\n  );\n}\n","export function schemaBlogPosting(data, authorName) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\", // \"Article\",\n        publisher: {\n          \"@type\": \"Organization\",\n          logo: {\n            type: \"ImageObject\",\n            url: \"https://grzegorowski.com/favicon.ico\",\n          },\n          name: authorName,\n        },\n        author: {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        headline: data.headline,\n        description: data.description,\n        datePublished: data.datePublished,\n        dateModified: data.dateModified,\n        keywords: data.keywords,\n        image: data.imageUrl && [\n          {\n            \"@type\": \"ImageObject\",\n            url: data.imageUrl,\n          },\n        ],\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": \"https://grzegorowski.com/\",\n        },\n        articleBody: data.articleBody,\n        copyrightHolder: {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        copyrightYear: data.copyrightYear,\n        creator: {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        inLanguage: \"en\",\n      }),\n    },\n  ];\n}\n\nexport function schemaArticle(data, authorName) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"Article\", // \"Article\",\n        publisher: authorName && {\n          \"@type\": \"Organization\",\n          logo: {\n            type: \"ImageObject\",\n            url: \"https://grzegorowski.com/favicon.ico\",\n          },\n          name: authorName,\n        },\n        author: authorName && {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        headline: data.headline,\n        description: data.description,\n        datePublished: data.datePublished,\n        dateModified: data.dateModified,\n        keywords: data.keywords,\n        image: data.imageUrl && [\n          {\n            \"@type\": \"ImageObject\",\n            url: data.imageUrl,\n          },\n        ],\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": \"https://grzegorowski.com/\",\n        },\n        copyrightHolder: authorName,\n        copyrightYear: data.copyrightYear,\n        creator: authorName,\n        inLanguage: \"en\",\n      }),\n    },\n  ];\n}\n\nexport function schemaPerson(data) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"Person\",\n        name: data.name,\n        url: data.url,\n        image: data.imageUrl && {\n          \"@type\": \"ImageObject\",\n          url: data.imageUrl,\n        },\n        nationality: \"Polish\",\n        alumniOf: [\n          {\n            \"@type\": \"CollegeOrUniversity\",\n            name: \"Warsaw University of Technology\",\n            sameAs: [\n              \"https://en.wikipedia.org/wiki/Warsaw_University_of_Technology\",\n              \"https://www.pw.edu.pl/engpw\",\n            ],\n          },\n        ],\n        gender: \"Male\",\n        description: \"Full-stack developer\",\n        jobTitle: \"Senior Software Engineer\",\n        worksFor: [\n          {\n            \"@type\": \"Organization\",\n            name: \"Equinix Inc.\",\n            sameAs: [\n              \"https://www.equinix.com/\",\n              \"https://www.linkedin.com/company/equinix/\",\n              \"https://twitter.com/equinix\",\n            ],\n          },\n        ],\n        address: {\n          \"@type\": \"PostalAddress\",\n          addressLocality: \"Warsaw\",\n          addressCountry: \"Poland\",\n        },\n      }),\n    },\n  ];\n}\n\nexport function schemaWebsite(data, authorName) {\n  // see: https://developers.google.com/search/docs/data-types/article#type_definitions\n  return [\n    {\n      type: \"application/ld+json\",\n      innerHTML: JSON.stringify({\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: data.url,\n        headline: data.headline,\n        description: data.description,\n        publisher: authorName && {\n          \"@type\": \"Organization\",\n          logo: {\n            type: \"ImageObject\",\n            url: \"https://grzegorowski.com/favicon.ico\",\n          },\n          name: authorName,\n        },\n        author: authorName && {\n          \"@type\": \"Person\",\n          name: authorName,\n        },\n        datePublished: data.datePublished,\n        dateModified: data.dateModified,\n        image: data.imageUrl && [\n          {\n            \"@type\": \"ImageObject\",\n            url: data.imageUrl,\n          },\n        ],\n        copyrightHolder: authorName,\n        copyrightYear: data.copyrightYear,\n        creator: authorName,\n        inLanguage: \"en\",\n      }),\n    },\n  ];\n}\n","import styled from \"styled-components\";\nimport { BP_SMALL, BP_MEDIUM, CONTENT_MAX_WIDTH } from \"../variables\";\n\nexport const Wrapper = styled.aside`\n  background: #f4f8fb;\n`;\n\nexport const Container = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n`;\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 12px 0;\n  @media (min-width: ${BP_SMALL}px) {\n    padding: 12px;\n  }\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst smallSizes = {\n  small: \"50%\",\n  medium: \"50%\",\n  large: \"100%\",\n};\nconst mediumSizes = {\n  small: \"33.333%\",\n  medium: \"50%\",\n  large: \"100%\",\n};\n\n// fix left-right margin collapsing\nexport const Item = styled.li`\n  display: flex;\n  flex: 1 0 100%;\n  @media (min-width: ${BP_SMALL}px) {\n    flex: 1 0 ${({ size }) => smallSizes[size]};\n  }\n  @media (min-width: ${BP_MEDIUM}px) {\n    flex: 1 0 ${({ size }) => mediumSizes[size]};\n  }\n\n  width: 100%;\n  @media (min-width: ${BP_SMALL}px) {\n    width: ${({ size }) => smallSizes[size]};\n  }\n  @media (min-width: ${BP_MEDIUM}px) {\n    width: ${({ size }) => mediumSizes[size]};\n  }\n\n  margin: 0;\n  @media (min-width: ${BP_SMALL}px) {\n    min-height: ${({ size }) => (size === \"large\" ? \"400\" : \"460\")}px;\n  }\n\n  padding: 12px 8px;\n  @media (min-width: ${BP_SMALL}px) {\n    padding: 12px;\n  }\n  ${({ featured }) => (featured ? \"padding: 6px;\" : \"\")}\n`;\n","import React from \"react\";\nimport CardPost from \"../CardPost\";\nimport { Container, List, Item } from \"./styles\";\n\n// TODO: support CardPost layout for PageTag\nconst itemSize = (index, even = false) => {\n  if (!even) {\n    if (index % 6 === 0) {\n      return \"large\";\n    }\n    if (index % 6 === 4 || index % 6 === 5) {\n      return \"medium\";\n    }\n  }\n  return \"small\";\n};\n\nexport default ({ cards, allEven }) => (\n  <Container>\n    <List>\n      {cards.map((card, index) => (\n        <Item\n          key={card.id}\n          size={itemSize(index, allEven)}\n          featured={!allEven && index === 0}\n        >\n          <CardPost\n            title={card.title}\n            slug={card.slug}\n            timeToRead={card.timeToRead}\n            size={itemSize(index, allEven)}\n            excerpt={card.excerpt}\n            image={card.image}\n            tag={card.tag}\n            author={card.author}\n            dateCreated={card.dateCreated}\n          />\n        </Item>\n      ))}\n    </List>\n  </Container>\n);\n","import styled from \"styled-components\";\nimport Img from \"gatsby-image\";\nimport { ffSans, toEm } from \"src/utils/typography\";\nimport { CONTENT_OVERLAP_HEIGHT } from \"../variables\";\n\nexport const Wrapper = styled.header`\n  position: relative;\n  padding-top: ${({ withTopBar }) => (withTopBar ? 0 : 50)}px;\n  padding-bottom: ${({ withTopBar }) =>\n    withTopBar ? 0 : CONTENT_OVERLAP_HEIGHT}px;\n  min-height: ${({ withTopBar, large }) =>\n    withTopBar ? 450 : large ? 600 : 400}px;\n  height: 30vh;\n  color: ${({ white }) => (white ? \"#aaa\" : \"#fff\")};\n  background: ${({ white }) => (white ? \"#fff\" : \"rgba(0, 0, 0, 0.6)\")};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const Background = styled(Img)`\n  position: absolute !important;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n`;\n\nexport const NoBackground = styled.div`\n  position: absolute !important;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  background: ${({ white }) => (white ? \"#fff\" : \"#000\")};\n`;\n\nexport const Container = styled.div`\n  padding: 12px 24px;\n  max-width: 900px;\n  font-size: ${toEm(15)}rem;\n`;\n\nexport const Avatar = styled(Img)`\n  position: relative;\n  border-radius: 50%;\n  overflow: hidden;\n  box-shadow: 0 0 0 6px hsla(0, 0%, 100%, 0.1);\n`;\n\nexport const Title = styled.h1`\n  font-family: ${ffSans};\n  font-size: ${({ large }) => toEm(large ? 128 : 24)}rem;\n  font-weight: 600;\n  margin: 12px 0;\n`;\n\nexport const Description = styled.h2`\n  font-family: ${ffSans};\n  font-size: ${toEm(16)}rem;\n  font-weight: 400;\n  margin: 0;\n`;\n","import React from \"react\";\nimport {\n  Wrapper,\n  Avatar,\n  Background,\n  NoBackground,\n  Container,\n  Title,\n  Description,\n} from \"./styles\";\n\nexport default function Header({\n  background,\n  profileImage,\n  title,\n  postsNumber,\n  links,\n  description,\n  children,\n  withTopBar = false,\n  banner = false,\n}) {\n  return (\n    <Wrapper withTopBar={withTopBar} white={banner} large={banner}>\n      {background ? (\n        <Background\n          fluid={background}\n          objectFit=\"cover\"\n          objectPosition=\"50% 50%\"\n          alt=\"Title\"\n        />\n      ) : (\n        <NoBackground white={banner} />\n      )}\n      <Container>\n        {profileImage && <Avatar fixed={profileImage} alt={title} />}\n        {title && <Title large={banner}>{title}</Title>}\n        {description && <Description>{description}</Description>}\n        {children}\n      </Container>\n    </Wrapper>\n  );\n}\n","export const getPostCards = (posts, authors) => {\n  const postsWithAuthors = posts.map(({ node }) => {\n    const author = authors.find(\n      ({ node: author }) => author.slug === node.frontmatter.author,\n    );\n    return postToCard(node, author);\n  });\n  return postsWithAuthors;\n};\n\nconst postToCard = (postNode, authorNode) => ({\n  id: postNode.id,\n  slug: postNode.frontmatter.slug,\n  tag:\n    postNode.frontmatter &&\n    postNode.frontmatter.tags &&\n    postNode.frontmatter.tags[0],\n  title: postNode.frontmatter.title,\n  image:\n    postNode.frontmatter &&\n    postNode.frontmatter.feature_image &&\n    postNode.frontmatter.feature_image.childImageSharp.fluid,\n  excerpt: postNode.frontmatter.excerpt || postNode.excerpt,\n  timeToRead: postNode.timeToRead,\n  dateCreated: postNode.frontmatter.date_created || postNode.date_created,\n  author: authorNode &&\n    authorNode.node && {\n      name: authorNode.node.name,\n      image:\n        authorNode.node.profile_image &&\n        authorNode.node.profile_image.childImageSharp &&\n        authorNode.node.profile_image.childImageSharp.fixed,\n    },\n});\n","import styled from \"styled-components\";\nimport { CONTENT_MAX_WIDTH, CONTENT_OVERLAP_HEIGHT } from \"../variables\";\n\n// export const Content = styled.div`\n//   display: block;\n//   margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n//   max-width: ${CONTENT_MAX_WIDTH}px;\n//   flex: 1 0 auto;\n//   min-width: 33.333%;\n// `;\n\nexport const Content = styled.div`\n  position: relative;\n  z-index: 1;\n  display: block;\n  margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n  flex: 1 0 auto;\n`;\n","import React from \"react\";\nimport CardList from \"../CardList\";\nimport Header from \"../Header\";\nimport PageLayout from \"../PageLayout\";\nimport { Content } from \"./styles\";\nimport Seo from \"../Seo\";\n\nexport default function PageWithList({ main, cardList }) {\n  return (\n    <PageLayout singlePage>\n      <Seo\n        data={{ frontmatter: { title: main.title, excerpt: main.description } }}\n        contentType=\"website\"\n      />\n\n      <Header\n        background={main.image}\n        title={main.title}\n        description={main.description}\n      />\n      <Content>\n        <CardList cards={cardList} allEven />\n      </Content>\n    </PageLayout>\n  );\n}\n"],"sourceRoot":""}