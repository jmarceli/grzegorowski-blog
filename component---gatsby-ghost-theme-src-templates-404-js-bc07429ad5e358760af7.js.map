{"version":3,"sources":["webpack:///../gatsby-ghost-theme/src/components/Page404/styles.js","webpack:///../gatsby-ghost-theme/src/components/Page404/index.js","webpack:///../gatsby-ghost-theme/src/templates/404.js","webpack:///../gatsby-ghost-theme/src/components/CardList/styles.js","webpack:///../gatsby-ghost-theme/src/components/CardList/index.js","webpack:///../gatsby-ghost-theme/src/components/Header/styles.js","webpack:///../gatsby-ghost-theme/src/components/Header/index.js","webpack:///../gatsby-ghost-theme/src/utils/mappers.js"],"names":["Content","styled","div","withConfig","displayName","componentId","variables","LinkHomepage","gatsby_browser_entry","typography","toEm","Page404","_ref","posts","authors","cards","getPostCards","react_default","a","createElement","PageLayout","singlePage","opaque","Header","banner","title","description","to","CardList","allEven","__webpack_require__","d","__webpack_exports__","query","data","pageContext","React","utils_ampContext","ampContext","edges","Container","aside","List","ul","smallSizes","small","medium","large","mediumSizes","Item","li","size","_ref2","_ref3","_ref4","_ref5","_ref6","featured","itemSize","index","even","map","card","key","id","CardPost","slug","timeToRead","excerpt","image","tag","author","dateCreated","Wrapper","header","withTopBar","white","Background","gatsby_image_default","NoBackground","Avatar","Title","h1","_ref7","Description","h2","background","profileImage","postsNumber","links","children","_ref$withTopBar","_ref$banner","fluid","objectFit","objectPosition","alt","fixed","node","find","postToCard","postNode","authorNode","date_created","name"],"mappings":"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","file":"component---gatsby-ghost-theme-src-templates-404-js-bc07429ad5e358760af7.js","sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport { ffSans, toEm } from \"src/utils/typography\";\nimport {\n  CONTENT_MAX_WIDTH,\n  CONTENT_OVERLAP_HEIGHT,\n  COLOR_PRIMARY,\n} from \"../variables\";\n\nexport const Header = styled.div`\n  padding: 0 12px;\n  margin: 0 0 -12px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  z-index: 1;\n  display: block;\n  margin: -${CONTENT_OVERLAP_HEIGHT}px auto 0;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n  flex: 1 0 auto;\n`;\n\nexport const LinkHomepage = styled(Link)`\n  font-family: ${ffSans};\n  font-size: ${toEm(12)}rem;\n  color: ${COLOR_PRIMARY};\n  margin-top: 24px;\n  display: inline-block;\n`;\n","import React from \"react\";\nimport PageLayout from \"../PageLayout\";\nimport Header from \"../Header\";\nimport CardList from \"../CardList\";\nimport { Content, LinkHomepage } from \"./styles\";\nimport { getPostCards } from \"../../utils/mappers\";\n\nexport default function Page404({ posts, authors }) {\n  const cards = getPostCards(posts, authors);\n\n  return (\n    <PageLayout singlePage opaque>\n      <Header banner title=\"404\" description=\"Page not found\">\n        <LinkHomepage to=\"/\">Go to the front page â†’</LinkHomepage>\n      </Header>\n      <Content>\n        <CardList cards={cards} allEven />\n      </Content>\n    </PageLayout>\n  );\n}\n","import React from \"react\";\n// eslint-disable-next-line no-unused-vars\nimport { GatsbyImageSharpFixed, GatsbyImageSharpFluid } from \"gatsby-image\";\nimport { graphql } from \"gatsby\";\nimport Page404 from \"../components/Page404\";\nimport { AmpContext } from \"../utils/ampContext\";\n\nexport default ({ data, pageContext }) => {\n  const ampContext = React.useContext(AmpContext);\n  ampContext.setIsAmp(pageContext.isAmp);\n\n  return <Page404 posts={data.posts.edges} authors={data.authors.edges} />;\n};\n\nexport const query = graphql`\n  {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date_created], order: DESC }\n      filter: {\n        frontmatter: { draft: { ne: true }, layout: { nin: [\"page\", \"home\"] } }\n      }\n      limit: 9\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt\n          frontmatter {\n            title\n            slug\n            tags\n            date_created\n            date_updated\n            author\n            feature_image {\n              absolutePath\n              childImageSharp {\n                fluid(maxWidth: 600, maxHeight: 300) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    authors: allAuthorsYaml {\n      edges {\n        node {\n          bio\n          id\n          website\n          location\n          cover_image {\n            childImageSharp {\n              fixed(width: 30, height: 30) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport { BP_SMALL, BP_MEDIUM, CONTENT_MAX_WIDTH } from \"../variables\";\n\nexport const Wrapper = styled.aside`\n  background: #f4f8fb;\n`;\n\nexport const Container = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: ${CONTENT_MAX_WIDTH}px;\n`;\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 12px 0;\n  @media (min-width: ${BP_SMALL}px) {\n    padding: 12px;\n  }\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst smallSizes = {\n  small: \"50%\",\n  medium: \"50%\",\n  large: \"100%\",\n};\nconst mediumSizes = {\n  small: \"33.333%\",\n  medium: \"50%\",\n  large: \"100%\",\n};\n\n// fix left-right margin collapsing\nexport const Item = styled.li`\n  display: flex;\n  flex: 1 0 100%;\n  @media (min-width: ${BP_SMALL}px) {\n    flex: 1 0 ${({ size }) => smallSizes[size]};\n  }\n  @media (min-width: ${BP_MEDIUM}px) {\n    flex: 1 0 ${({ size }) => mediumSizes[size]};\n  }\n\n  width: 100%;\n  @media (min-width: ${BP_SMALL}px) {\n    width: ${({ size }) => smallSizes[size]};\n  }\n  @media (min-width: ${BP_MEDIUM}px) {\n    width: ${({ size }) => mediumSizes[size]};\n  }\n\n  margin: 0;\n  @media (min-width: ${BP_SMALL}px) {\n    min-height: ${({ size }) => (size === \"large\" ? \"400\" : \"460\")}px;\n  }\n\n  padding: 12px 8px;\n  @media (min-width: ${BP_SMALL}px) {\n    padding: 12px;\n  }\n  ${({ featured }) => (featured ? \"padding: 6px;\" : \"\")}\n`;\n","import React from \"react\";\nimport CardPost from \"../CardPost\";\nimport { Container, List, Item } from \"./styles\";\n\n// TODO: support CardPost layout for PageTag\nconst itemSize = (index, even = false) => {\n  if (!even) {\n    if (index % 6 === 0) {\n      return \"large\";\n    }\n    if (index % 6 === 4 || index % 6 === 5) {\n      return \"medium\";\n    }\n  }\n  return \"small\";\n};\n\nexport default ({ cards, allEven }) => (\n  <Container>\n    <List>\n      {cards.map((card, index) => (\n        <Item\n          key={card.id}\n          size={itemSize(index, allEven)}\n          featured={!allEven && index === 0}\n        >\n          <CardPost\n            title={card.title}\n            slug={card.slug}\n            timeToRead={card.timeToRead}\n            size={itemSize(index, allEven)}\n            excerpt={card.excerpt}\n            image={card.image}\n            tag={card.tag}\n            author={card.author}\n            dateCreated={card.dateCreated}\n          />\n        </Item>\n      ))}\n    </List>\n  </Container>\n);\n","import styled from \"styled-components\";\nimport Img from \"gatsby-image\";\nimport { ffSans, toEm } from \"src/utils/typography\";\nimport { CONTENT_OVERLAP_HEIGHT } from \"../variables\";\n\nexport const Wrapper = styled.header`\n  position: relative;\n  padding-top: ${({ withTopBar }) => (withTopBar ? 0 : 50)}px;\n  padding-bottom: ${({ withTopBar }) =>\n    withTopBar ? 0 : CONTENT_OVERLAP_HEIGHT}px;\n  min-height: ${({ withTopBar, large }) =>\n    withTopBar ? 450 : large ? 600 : 400}px;\n  height: 30vh;\n  color: ${({ white }) => (white ? \"#aaa\" : \"#fff\")};\n  background: ${({ white }) => (white ? \"#fff\" : \"rgba(0, 0, 0, 0.6)\")};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const Background = styled(Img)`\n  position: absolute !important;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n`;\n\nexport const NoBackground = styled.div`\n  position: absolute !important;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  background: ${({ white }) => (white ? \"#fff\" : \"#000\")};\n`;\n\nexport const Container = styled.div`\n  padding: 12px 24px;\n  max-width: 900px;\n  font-size: ${toEm(15)}rem;\n`;\n\nexport const Avatar = styled(Img)`\n  position: relative;\n  border-radius: 50%;\n  overflow: hidden;\n  box-shadow: 0 0 0 6px hsla(0, 0%, 100%, 0.1);\n`;\n\nexport const Title = styled.h1`\n  font-family: ${ffSans};\n  font-size: ${({ large }) => toEm(large ? 128 : 24)}rem;\n  font-weight: 600;\n  margin: 12px 0;\n`;\n\nexport const Description = styled.h2`\n  font-family: ${ffSans};\n  font-size: ${toEm(16)}rem;\n  font-weight: 400;\n  margin: 0;\n`;\n","import React from \"react\";\nimport {\n  Wrapper,\n  Avatar,\n  Background,\n  NoBackground,\n  Container,\n  Title,\n  Description,\n} from \"./styles\";\n\nexport default function Header({\n  background,\n  profileImage,\n  title,\n  postsNumber,\n  links,\n  description,\n  children,\n  withTopBar = false,\n  banner = false,\n}) {\n  return (\n    <Wrapper withTopBar={withTopBar} white={banner} large={banner}>\n      {background ? (\n        <Background\n          fluid={background}\n          objectFit=\"cover\"\n          objectPosition=\"50% 50%\"\n          alt=\"Title\"\n        />\n      ) : (\n        <NoBackground white={banner} />\n      )}\n      <Container>\n        {profileImage && <Avatar fixed={profileImage} alt={title} />}\n        {title && <Title large={banner}>{title}</Title>}\n        {description && <Description>{description}</Description>}\n        {children}\n      </Container>\n    </Wrapper>\n  );\n}\n","export const getPostCards = (posts, authors) => {\n  const postsWithAuthors = posts.map(({ node }) => {\n    const author = authors.find(\n      ({ node: author }) => author.slug === node.frontmatter.author,\n    );\n    return postToCard(node, author);\n  });\n  return postsWithAuthors;\n};\n\nconst postToCard = (postNode, authorNode) => ({\n  id: postNode.id,\n  slug: postNode.frontmatter.slug,\n  tag:\n    postNode.frontmatter &&\n    postNode.frontmatter.tags &&\n    postNode.frontmatter.tags[0],\n  title: postNode.frontmatter.title,\n  image:\n    postNode.frontmatter &&\n    postNode.frontmatter.feature_image &&\n    postNode.frontmatter.feature_image.childImageSharp.fluid,\n  excerpt: postNode.frontmatter.excerpt || postNode.excerpt,\n  timeToRead: postNode.timeToRead,\n  dateCreated: postNode.frontmatter.date_created || postNode.date_created,\n  author: authorNode &&\n    authorNode.node && {\n      name: authorNode.node.name,\n      image:\n        authorNode.node.profile_image &&\n        authorNode.node.profile_image.childImageSharp &&\n        authorNode.node.profile_image.childImageSharp.fixed,\n    },\n});\n"],"sourceRoot":""}