{"version":3,"sources":["webpack:///../gatsby-ghost-theme/src/templates/tag.js"],"names":["__webpack_exports__","_ref","data","pageContext","React","_utils_ampContext__WEBPACK_IMPORTED_MODULE_5__","ampContext","tag_slug","allTags","tags","edges","map","_ref2","node","id","slug","title","name","image","fluid","excerpt","description","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_PageWithList__WEBPACK_IMPORTED_MODULE_3__","main","cardList","cards","getPostCards","authors","query"],"mappings":"qMAQeA,EAAA,iBAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,YAItB,GAHmBC,eAAnBC,EAAA,GACAC,SAAoBH,EAApBG,QAEKH,EAALI,SAA2B,CACzB,IAAMC,EAAUN,EAAAO,KAAAC,MAAAC,IAAoB,SAAAC,GAAA,IAAGC,EAAHD,EAAAC,KAAA,MAAe,CACjDC,GAAID,EAD6CC,GAEjDC,KAAI,OAASF,EAFoCE,KAGjDC,MAAOH,EAH0CI,KAIjDC,MACEL,GAAQA,EAARA,eAA8BA,gCALiBM,MAMjDC,QAASP,EAAKQ,eAGhB,OACEC,EAAAC,EAAAC,cAAAC,EAAA,GACEC,KAAM,CAAEV,MAAF,WAAqBK,YAAa,oBACxCM,SAAUnB,IAKhB,IAAMoB,EAAQC,YAAa3B,QAADQ,MAAmBR,UAA7CQ,OAEA,OACEY,EAAAC,EAAAC,cAAAC,EAAA,GACEE,SADFC,EAEEF,KAAM,CACJR,MACEhB,qBACAA,oCAHEiB,MAIJH,MAAOd,MAJHe,KAKJI,YAAanB,MAASmB,aAExBS,QAAS5B,UAAaQ,SAKrB,IAAMqB,EAAN","file":"component---gatsby-ghost-theme-src-templates-tag-js-a9a43d5486568ffef887.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\n// eslint-disable-next-line no-unused-vars\nimport { GatsbyImageSharpFixed, GatsbyImageSharpFluid } from \"gatsby-image\";\nimport PageWithList from \"../components/PageWithList\";\nimport { getPostCards } from \"../utils/mappers\";\nimport { AmpContext } from \"../utils/ampContext\";\n\nexport default ({ data, pageContext }) => {\n  const ampContext = React.useContext(AmpContext);\n  ampContext.setIsAmp(pageContext.isAmp);\n\n  if (!pageContext.tag_slug) {\n    const allTags = data.tags.edges.map(({ node }) => ({\n      id: node.id,\n      slug: `tag/${node.slug}`,\n      title: node.name,\n      image:\n        node && node.feature_image && node.feature_image.childImageSharp.fluid,\n      excerpt: node.description,\n    }));\n\n    return (\n      <PageWithList\n        main={{ title: \"All tags\", description: \"List of all tags\" }}\n        cardList={allTags}\n      />\n    );\n  }\n\n  const cards = getPostCards(data.posts.edges, data.authors.edges);\n\n  return (\n    <PageWithList\n      cardList={cards}\n      main={{\n        image:\n          data.tag.feature_image &&\n          data.tag.feature_image.childImageSharp.fluid,\n        title: data.tag.name,\n        description: data.tag.description,\n      }}\n      authors={data.authors.edges}\n    />\n  );\n};\n\nexport const query = graphql`\n  query($tag_slug: String) {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date_created], order: DESC }\n      filter: {\n        frontmatter: { draft: { ne: true }, tags: { in: [$tag_slug] } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          html\n          timeToRead\n          rawMarkdownBody\n          excerpt\n          frontmatter {\n            title\n            slug\n            date\n            tags\n            date_created\n            date_updated\n            author\n            feature_image {\n              absolutePath\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    tag: tagsYaml(slug: { eq: $tag_slug }) {\n      id\n      name\n      description\n      feature_image {\n        absolutePath\n        childImageSharp {\n          fluid(maxWidth: 1920) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      meta_description\n      meta_title\n      created_at\n      updated_at\n      visibility\n    }\n    tags: allTagsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          description\n          meta_title\n          meta_description\n          created_at\n          feature_image {\n            absolutePath\n            childImageSharp {\n              fluid(maxWidth: 600) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    authors: allAuthorsYaml {\n      edges {\n        node {\n          id\n          slug\n          name\n          bio\n          website\n          location\n          profile_image {\n            childImageSharp {\n              fixed(width: 30, height: 30) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}